{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","redux/actions.js","redux/constants.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","borderTop","height","padding","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRequest","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"6SAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCaLK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAQ,kBAAC,EAAD,CACJC,IAAKF,EAAKP,GACVA,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCG1BW,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,UAAW,kBAAmBC,OAAQ,OAAQC,QAAS,YACrFL,EAAMM,WCiBJC,E,YAnBX,WAAYP,GAAQ,IAAD,8BACf,4CAAMA,KACDQ,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,gEAEJG,KAAKZ,MAAMM,a,GAhBCQ,aCsBrBC,G,kMAEFH,KAAKZ,MAAMgB,oB,+BAGH,IAAD,EACoDJ,KAAKZ,MAAxDiB,EADD,EACCA,YAAaC,EADd,EACcA,eAAgBC,EAD9B,EAC8BA,UAC/BC,EAFC,EACyC/B,OAClBgC,QAAO,SAACC,GACpC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAASP,EAAYM,kBAEvD,OAAOJ,EACL,uCAEA,yBAAKlC,UAAU,SAASgB,MAAO,CAAEG,OAAQ,UACvC,yBAAKnB,UAAU,cACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcuB,KAE3B,kBAAC,EAAD,CAAQjC,UAAU,OAChB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUI,OAAQ+B,W,GApBZN,cA4BHW,eA1CS,SAACjB,GACvB,MAAO,CACLS,YAAaT,EAAMkB,aAAaT,YAChC5B,OAAQmB,EAAMmB,cAActC,OAC5B8B,UAAWX,EAAMmB,cAAcR,UAC/BT,MAAOF,EAAMmB,cAAcjB,UAIJ,SAACkB,GAAD,MAAe,CACxCV,eAAgB,SAACW,GAAD,OAAWD,ECZpB,CACLhC,KCT+B,sBDU/BkC,QDUiDD,EAAME,OAAOC,SAChEhB,gBAAiB,kBAAMY,GCPU,SAACA,GAClCA,EAAS,CAAEhC,KCbyB,2BDcpCqC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUT,EAAS,CAAEhC,KCfO,yBDeuBkC,QAASO,OACjEC,OAAM,SAACC,GAAD,OAASX,EAAS,CAAEhC,KCfO,yBDeuBkC,QAASS,cDiCvDd,CAA6CV,GGxCxCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAqB,CACzB5B,YAAa,IAYT6B,EAAsB,CAC1B3B,WAAW,EACX9B,OAAQ,GACRqB,MAAO,ICXHqC,G,MAASC,0BACTC,EAAcC,YAAgB,CAAExB,aDFV,WAA8C,IAA7ClB,EAA4C,uDAApCqC,EAAoBM,EAAgB,uDAAP,GAChE,OAAQA,EAAOvD,MACb,IFb+B,sBEc7B,OAAOwD,OAAOC,OAAO,GAAI7C,EAAO,CAAES,YAAakC,EAAOrB,UACxD,QACE,OAAOtB,ICHuCmB,cDavB,WAA+C,IAA9CnB,EAA6C,uDAArCsC,EAAqBK,EAAgB,uDAAP,GAClE,OAAQA,EAAOvD,MACb,IF1BkC,yBE2BhC,OAAOwD,OAAOC,OAAO,GAAI7C,EAAO,CAAEW,WAAW,IAC/C,IF3BkC,yBE4BhC,OAAOiC,OAAOC,OAAO,GAAI7C,EAAO,CAC9BnB,OAAQ8D,EAAOrB,QACfX,WAAW,IAEf,IF/BkC,yBEgChC,OAAOiC,OAAOC,OAAO,GAAI7C,EAAO,CAC9BE,MAAOyC,EAAOrB,QACdX,WAAW,IAEf,QACE,OAAOX,MC3BP8C,EAAQC,YACZN,EACAO,YAAgBC,IAAiBV,IAGnCW,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SF4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA5B,GACLyD,QAAQzD,MAAMA,EAAM0D,c","file":"static/js/main.8a054ae4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (<Card\n                        key={user.id}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                    );\n                })\n            }\n        </div>\n    );\n}\n    \nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots' \n                onChange={searchChange}\n                />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', borderTop: '1px solid black', height: '100%', padding: '7px 0px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops. There has been an error</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from \"../redux/actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots()),\n});\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, isPending, robots } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc box\" style={{ height: \"100vh\" }}>\n        <div className=\"box header\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange} />\n        </div>\n        <Scroll className=\"box\">\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILURE,\n} from \"./constants.js\";\n\nexport const setSearchField = (text) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text,\n  };\n};\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((err) => dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: err }));\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILURE = \"REQUEST_ROBOTS_FAILURE\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILURE,\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRequest = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRequest, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILURE:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./redux/reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}